import OpenAI from 'openai'

// Check if API keys are available
const openaiApiKey = import.meta.env.VITE_OPENAI_API_KEY
const deepseekApiKey = import.meta.env.VITE_DEEPSEEK_API_KEY || 'sk-2e395158aff14a5d883acd1202d1f71f'

if (!openaiApiKey && !deepseekApiKey) {
  console.warn('No AI API keys found. AI features will be disabled.')
}

// Initialize OpenAI client
const openai = openaiApiKey ? new OpenAI({
  apiKey: openaiApiKey,
  dangerouslyAllowBrowser: true
}) : null

// Initialize DeepSeek client (compatible with OpenAI API)
const deepseek = deepseekApiKey ? new OpenAI({
  apiKey: deepseekApiKey,
  baseURL: 'https://api.deepseek.com/v1',
  dangerouslyAllowBrowser: true
}) : null

export interface AIAnalysisRequest {
  type: 'spending_analysis' | 'budget_optimization' | 'investment_advice' | 'fire_planning' | 'crisis_simulation' | 'general_query'
  data: any
  userContext: {
    plan: 'free' | 'pro' | 'premium'
    currency: string
    monthlyIncome?: number
    monthlyExpenses?: number
    totalBalance?: number
  }
  query?: string
}

export interface AIResponse {
  analysis: string
  recommendations: AIRecommendation[]
  insights: AIInsight[]
  actions?: AIAction[]
}

export interface AIRecommendation {
  id: string
  title: string
  description: string
  priority: 'high' | 'medium' | 'low'
  category: string
  impact: string
  actionable: boolean
}

export interface AIInsight {
  id: string
  type: 'warning' | 'opportunity' | 'achievement' | 'trend'
  title: string
  description: string
  value?: string
  change?: number
}

export interface AIAction {
  id: string
  label: string
  type: 'create_budget' | 'adjust_allocation' | 'set_alert' | 'save_scenario'
  data: any
}

class AIFinancialCopilot {
  private async makeAIRequest(messages: any[], options: any = {}): Promise<string> {
    const requestOptions = {
      model: 'gpt-4o',
      messages,
      temperature: 0.7,
      max_tokens: 1500,
      ...options
    }

    // Try OpenAI first
    if (openai) {
      try {
        console.log('ü§ñ Tentando OpenAI...')
        const completion = await openai.chat.completions.create(requestOptions)
        const response = completion.choices[0]?.message?.content || ''
        console.log('‚úÖ OpenAI respondeu com sucesso')
        return response
      } catch (error: any) {
        console.warn('‚ö†Ô∏è OpenAI falhou:', error.message)
        // Continue to try DeepSeek
      }
    }

    // Try DeepSeek as fallback
    if (deepseek) {
      try {
        console.log('ü§ñ Tentando DeepSeek como fallback...')
        const deepseekOptions = {
          ...requestOptions,
          model: 'deepseek-chat' // DeepSeek's chat model
        }
        const completion = await deepseek.chat.completions.create(deepseekOptions)
        const response = completion.choices[0]?.message?.content || ''
        console.log('‚úÖ DeepSeek respondeu com sucesso')
        return response
      } catch (error: any) {
        console.warn('‚ö†Ô∏è DeepSeek tamb√©m falhou:', error.message)
      }
    }

    // If both fail, throw error
    throw new Error('Ambas as IAs (OpenAI e DeepSeek) est√£o indispon√≠veis no momento. Tente novamente em alguns minutos.')
  }

  private getSystemPrompt(userContext: AIAnalysisRequest['userContext']): string {
    return `Voc√™ √© um copiloto financeiro especializado em finan√ßas pessoais brasileiras. Suas caracter√≠sticas:

PERSONALIDADE:
- Comunica√ß√£o clara e did√°tica, sem jarg√µes financeiros
- Foco em a√ß√µes pr√°ticas e realiz√°veis
- Otimista mas realista sobre metas financeiras
- Especialista em mercado brasileiro (Selic, Ibovespa, FIIs, Tesouro Direto)

CONTEXTO DO USU√ÅRIO:
- Plano: ${userContext.plan}
- Moeda: ${userContext.currency}
- Renda mensal: ${userContext.monthlyIncome ? `R$ ${userContext.monthlyIncome.toLocaleString('pt-BR')}` : 'N√£o informada'}
- Gastos mensais: ${userContext.monthlyExpenses ? `R$ ${userContext.monthlyExpenses.toLocaleString('pt-BR')}` : 'N√£o informados'}
- Patrim√¥nio: ${userContext.totalBalance ? `R$ ${userContext.totalBalance.toLocaleString('pt-BR')}` : 'N√£o informado'}

LIMITA√á√ïES POR PLANO:
${userContext.plan === 'free' ? `
- Foco em educa√ß√£o financeira e conceitos b√°sicos
- An√°lises agregadas (sem dados espec√≠ficos de transa√ß√µes)
- Sugest√µes gerais aplic√°veis a qualquer situa√ß√£o
- M√°ximo 3 recomenda√ß√µes pr√°ticas por resposta
- Explica√ß√µes did√°ticas sobre investimentos e planejamento
- Dicas de economia dom√©stica e controle de gastos
` : userContext.plan === 'pro' ? `
- An√°lises detalhadas de transa√ß√µes
- Simula√ß√µes de cen√°rios FIRE
- Otimiza√ß√µes de or√ßamento personalizadas
- At√© 5 recomenda√ß√µes espec√≠ficas
- Previs√µes de 30-90 dias
` : `
- An√°lises completas e narrativas
- Simula√ß√µes Monte Carlo
- Otimiza√ß√µes fiscais avan√ßadas
- Recomenda√ß√µes ilimitadas
- A√ß√µes autom√°ticas sugeridas
- Relat√≥rios mensais personalizados
`}

DIRETRIZES:
1. Sempre forne√ßa n√∫meros espec√≠ficos quando poss√≠vel
2. Sugira a√ß√µes concretas, n√£o apenas teoria
3. Considere o contexto brasileiro (impostos, infla√ß√£o, Selic)
4. Seja direto: problema ‚Üí solu√ß√£o ‚Üí impacto
5. Use emojis para destacar pontos importantes
6. Sempre termine com pr√≥ximos passos claros

FORMATO DE RESPOSTA:
- An√°lise principal em portugu√™s claro
- Recomenda√ß√µes priorizadas por impacto
- Insights espec√≠ficos com valores
- A√ß√µes sugeridas quando aplic√°vel

Responda sempre em portugu√™s brasileiro.`
  }

  private handleAIRequestFailure(error: any, userContext: AIAnalysisRequest['userContext'], type: string, query?: string): AIResponse {
    if (userContext.plan === 'free') {
      // For free users, return educational content instead of error
      return this.getFreeEducationalContent(type, query)
    }
    // For paid users, re-throw the error
    throw error
  }

  async analyzeSpending(request: AIAnalysisRequest): Promise<AIResponse> {
    const { data, userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      // Return educational content for free users when API key is not available
      return this.getFreeEducationalContent('spending_analysis', query)
    }

    const prompt = userContext.plan === 'free' ? `
Forne√ßa dicas educacionais sobre controle de gastos:

PERGUNTA: ${query || 'Como controlar melhor os gastos?'}

Forne√ßa dicas pr√°ticas e educacionais sobre controle financeiro.` : `
Analise os gastos reais do usu√°rio e forne√ßa insights personalizados:

PERFIL FINANCEIRO:
- Renda mensal: R$ ${userContext.monthlyIncome?.toLocaleString('pt-BR') || 'N/A'}
- Gastos mensais: R$ ${userContext.monthlyExpenses?.toLocaleString('pt-BR') || 'N/A'}
- Patrim√¥nio total: R$ ${userContext.totalBalance?.toLocaleString('pt-BR') || 'N/A'}

AN√ÅLISE DE GASTOS:
- Total de transa√ß√µes analisadas: ${data.transactions?.length || 0}
- Gastos por categoria: ${JSON.stringify(data.categorySpending, null, 2)}
- Tend√™ncia mensal: M√©dia 3 meses: R$ ${data.monthlyTrend?.average3Months?.toLocaleString('pt-BR')}, M√™s atual: R$ ${data.monthlyTrend?.currentMonth?.toLocaleString('pt-BR')}
- Varia√ß√£o: ${data.monthlyTrend?.variance > 0 ? '+' : ''}R$ ${data.monthlyTrend?.variance?.toLocaleString('pt-BR')}

TOP 5 CATEGORIAS DE GASTO:
${data.topCategories?.map((cat: any) => `- ${cat.name}: R$ ${cat.amount.toLocaleString('pt-BR')} (${cat.percentage.toFixed(1)}%)`).join('\n')}

CONTAS:
${data.accounts?.map((acc: any) => `- ${acc.name} (${acc.type}): R$ ${acc.balance.toLocaleString('pt-BR')}`).join('\n')}

PERGUNTA ESPEC√çFICA: ${query || 'An√°lise completa dos gastos'}

Com base nos dados REAIS do usu√°rio, forne√ßa:
1. **An√°lise dos padr√µes de gasto** - identifique tend√™ncias e anomalias
2. **Oportunidades de economia** - categorias com maior potencial de redu√ß√£o
3. **Recomenda√ß√µes espec√≠ficas** - a√ß√µes pr√°ticas com valores em R$
4. **Previs√£o para pr√≥ximo m√™s** - baseada nos padr√µes identificados
5. **Alertas importantes** - gastos fora do padr√£o ou crescimento acelerado

Seja espec√≠fico com valores em R$, percentuais e prazos. Use os dados reais fornecidos.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ])
      
      return this.parseAIResponse(response, 'spending_analysis')
    } catch (error) {
      console.error('Error in AI spending analysis:', error)
      return this.handleAIRequestFailure(error, userContext, 'spending_analysis', query)
    }
  }

  async optimizeBudget(request: AIAnalysisRequest): Promise<AIResponse> {
    const { data, userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      return this.getFreeEducationalContent('budget_optimization', query)
    }

    const prompt = userContext.plan === 'free' ? `
Forne√ßa dicas educacionais sobre or√ßamentos pessoais:

OBJETIVO: ${query || 'Como criar e manter or√ßamentos eficazes'}

Forne√ßa dicas pr√°ticas sobre or√ßamento pessoal.` : `
Analise os or√ßamentos REAIS do usu√°rio e forne√ßa otimiza√ß√µes personalizadas:

PERFIL FINANCEIRO:
- Renda mensal: R$ ${userContext.monthlyIncome?.toLocaleString('pt-BR') || 'N/A'}
- Gastos mensais: R$ ${userContext.monthlyExpenses?.toLocaleString('pt-BR') || 'N/A'}
- Total or√ßado: R$ ${data.totalBudgeted?.toLocaleString('pt-BR') || 'N/A'}
- Total gasto: R$ ${data.totalSpent?.toLocaleString('pt-BR') || 'N/A'}

AN√ÅLISE DETALHADA DOS OR√áAMENTOS:
${data.budgetAnalysis?.map((budget: any) => 
  `- ${budget.category}: Or√ßado R$ ${budget.budgeted.toLocaleString('pt-BR')}, Gasto R$ ${budget.spent.toLocaleString('pt-BR')} (${budget.compliance.toFixed(1)}% - ${budget.status})`
).join('\n')}

OR√áAMENTOS EXCEDIDOS:
${data.overBudgetCategories?.map((budget: any) => 
  `- ${budget.category}: ${budget.compliance.toFixed(1)}% do or√ßamento (R$ ${(budget.spent - budget.budgeted).toLocaleString('pt-BR')} acima)`
).join('\n') || 'Nenhum or√ßamento excedido'}

OR√áAMENTOS SUBUTILIZADOS:
${data.underBudgetCategories?.map((budget: any) => 
  `- ${budget.category}: ${budget.compliance.toFixed(1)}% usado (R$ ${(budget.budgeted - budget.spent).toLocaleString('pt-BR')} dispon√≠vel)`
).join('\n') || 'Todos os or√ßamentos bem utilizados'}

CATEGORIAS SEM OR√áAMENTO (com gastos significativos):
${data.categoriesWithoutBudgets?.map((cat: any) => 
  `- ${cat.name}: R$ ${cat.amount.toLocaleString('pt-BR')} gastos sem controle`
).join('\n') || 'Todas as categorias importantes t√™m or√ßamento'}

PERGUNTA ESPEC√çFICA: ${query || 'Como otimizar meus or√ßamentos?'}

Com base nos dados REAIS dos or√ßamentos, forne√ßa:
1. **An√°lise de compliance** - quais or√ßamentos est√£o funcionando
2. **Ajustes recomendados** - valores espec√≠ficos para cada categoria
3. **Novas categorias de or√ßamento** - onde criar controles
4. **Estrat√©gias de economia** - como reduzir gastos nas categorias problem√°ticas
5. **Metas de melhoria** - objetivos espec√≠ficos para pr√≥ximo m√™s

Seja espec√≠fico com valores em R$ e percentuais de melhoria esperados.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ])
      
      return this.parseAIResponse(response, 'budget_optimization')
    } catch (error) {
      console.error('Error in AI budget optimization:', error)
      return this.handleAIRequestFailure(error, userContext, 'budget_optimization', query)
    }
  }

  async analyzeInvestments(request: AIAnalysisRequest): Promise<AIResponse> {
    const { data, userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      return this.getFreeEducationalContent('investment_advice', query)
    }

    const prompt = userContext.plan === 'free' ? `
Forne√ßa educa√ß√£o sobre investimentos:

PERGUNTA: ${query || 'Como come√ßar a investir?'}

Forne√ßa dicas educacionais sobre investimentos.` : `
Analise a carteira de investimentos REAL do usu√°rio:

PERFIL FINANCEIRO:
- Patrim√¥nio total: R$ ${userContext.totalBalance?.toLocaleString('pt-BR') || 'N/A'}
- Renda mensal: R$ ${userContext.monthlyIncome?.toLocaleString('pt-BR') || 'N/A'}
- Capacidade de investimento: R$ ${((userContext.monthlyIncome || 0) - (userContext.monthlyExpenses || 0)).toLocaleString('pt-BR')}

DADOS DA CARTEIRA:
${JSON.stringify(data, null, 2)}

FOCO: ${query || 'An√°lise completa da carteira'}

Com base nos dados REAIS, forne√ßa:
1. **An√°lise de diversifica√ß√£o** - distribui√ß√£o atual vs ideal
2. **Avalia√ß√£o de risco vs retorno** - adequa√ß√£o ao perfil
3. **Sugest√µes de rebalanceamento** - ajustes espec√≠ficos com valores
4. **Oportunidades de melhoria** - onde investir pr√≥ximos aportes
5. **Prote√ß√£o contra riscos** - como proteger o patrim√¥nio atual

Considere o cen√°rio atual da economia brasileira e seja espec√≠fico com valores e percentuais.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ])
      
      return this.parseAIResponse(response, 'investment_advice')
    } catch (error) {
      console.error('Error in AI investment analysis:', error)
      return this.handleAIRequestFailure(error, userContext, 'investment_advice', query)
    }
  }

  async planFIRE(request: AIAnalysisRequest): Promise<AIResponse> {
    const { data, userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      return this.getFreeEducationalContent('fire_planning', query)
    }

    const prompt = `
Analise o plano FIRE do usu√°rio e forne√ßa estrat√©gias de otimiza√ß√£o:

DADOS DO PLANO FIRE:
${JSON.stringify(data, null, 2)}

OBJETIVO: ${query || 'Otimizar estrat√©gia FIRE'}

Forne√ßa:
1. An√°lise da viabilidade do plano atual
2. Estrat√©gias para acelerar o FIRE
3. Ajustes de gastos e investimentos
4. Cen√°rios alternativos

Seja espec√≠fico sobre tempo e valores para atingir independ√™ncia financeira.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ])
      
      return this.parseAIResponse(response, 'fire_planning')
    } catch (error) {
      console.error('Error in AI FIRE planning:', error)
      return this.handleAIRequestFailure(error, userContext, 'fire_planning', query)
    }
  }

  async simulateCrisis(request: AIAnalysisRequest): Promise<AIResponse> {
    const { data, userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      return this.getFreeEducationalContent('crisis_simulation', query)
    }

    const prompt = `
Analise o resultado da simula√ß√£o de crise e forne√ßa insights:

DADOS DA SIMULA√á√ÉO:
${JSON.stringify(data, null, 2)}

CEN√ÅRIO: ${query || 'An√°lise de resist√™ncia a crises'}

Forne√ßa:
1. Interpreta√ß√£o dos resultados da simula√ß√£o
2. Pontos de vulnerabilidade da carteira
3. Estrat√©gias de prote√ß√£o
4. Sugest√µes de diversifica√ß√£o

Foque em a√ß√µes pr√°ticas para reduzir riscos.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ])
      
      return this.parseAIResponse(response, 'crisis_simulation')
    } catch (error) {
      console.error('Error in AI crisis simulation:', error)
      return this.handleAIRequestFailure(error, userContext, 'crisis_simulation', query)
    }
  }

  async generalQuery(request: AIAnalysisRequest): Promise<AIResponse> {
    const { userContext, query } = request

    if (!openaiApiKey && !deepseekApiKey) {
      return this.getFreeEducationalContent('general_query', query)
    }

    const prompt = `
Responda √† pergunta do usu√°rio sobre finan√ßas pessoais:

PERGUNTA: ${query}

Forne√ßa uma resposta educacional e pr√°tica, considerando o contexto financeiro brasileiro e o perfil do usu√°rio.`

    try {
      const response = await this.makeAIRequest([
        { role: 'system', content: this.getSystemPrompt(userContext) },
        { role: 'user', content: prompt }
      ], { max_tokens: 1000 })
      
      return this.parseAIResponse(response, 'general_query')
    } catch (error) {
      console.error('Error in AI general query:', error)
      return this.handleAIRequestFailure(error, userContext, 'general_query', query)
    }
  }

  private parseAIResponse(response: string, type: string): AIResponse {
    // Parse the AI response and extract structured data
    const lines = response.split('\n').filter(line => line.trim())
    
    const recommendations: AIRecommendation[] = []
    const insights: AIInsight[] = []
    const actions: AIAction[] = []
    
    // Extract recommendations (look for numbered lists or bullet points)
    const recPattern = /(?:^\d+\.|^[‚Ä¢\-\*])\s*(.+)/gm
    let match
    let recIndex = 0
    
    while ((match = recPattern.exec(response)) !== null && recIndex < 5) {
      recommendations.push({
        id: `rec_${recIndex}`,
        title: match[1].substring(0, 50) + (match[1].length > 50 ? '...' : ''),
        description: match[1],
        priority: recIndex < 2 ? 'high' : recIndex < 4 ? 'medium' : 'low',
        category: type,
        impact: 'M√©dio',
        actionable: true
      })
      recIndex++
    }
    
    // Extract insights from the response
    if (response.includes('R$') || response.includes('%')) {
      insights.push({
        id: 'insight_1',
        type: 'trend',
        title: 'An√°lise Financeira',
        description: 'IA identificou padr√µes nos seus dados financeiros',
        value: 'Analisado'
      })
    }
    
    // Generate actions based on type
    if (type === 'budget_optimization') {
      actions.push({
        id: 'action_1',
        label: 'Criar or√ßamento otimizado',
        type: 'create_budget',
        data: { optimized: true }
      })
    }
    
    return {
      analysis: response,
      recommendations,
      insights,
      actions
    }
  }

  private getFreeEducationalContent(type: string, query?: string): AIResponse {
    const educationalContent = {
      spending_analysis: {
        analysis: `üí° **Dicas para Controlar Gastos**

**üìä Regra dos 50/30/20:**
‚Ä¢ 50% para necessidades (moradia, alimenta√ß√£o, transporte)
‚Ä¢ 30% para desejos (lazer, restaurantes, hobbies)
‚Ä¢ 20% para poupan√ßa e investimentos

**üéØ Estrat√©gias Pr√°ticas:**
‚Ä¢ Anote TODOS os gastos por 1 semana
‚Ä¢ Identifique os "vazamentos" (gastos pequenos frequentes)
‚Ä¢ Use a regra das 24h para compras n√£o essenciais
‚Ä¢ Negocie contas fixas (internet, celular, seguros)

**üí∞ Onde Economizar Primeiro:**
‚Ä¢ Delivery e aplicativos de comida
‚Ä¢ Assinaturas n√£o utilizadas
‚Ä¢ Compras por impulso
‚Ä¢ Transporte (considere alternativas)

‚ú® **Upgrade para Pro:** An√°lises personalizadas dos seus gastos reais!`,
        recommendations: [
          {
            id: 'free_1',
            title: 'Implemente a regra 50/30/20',
            description: 'Organize seus gastos nessas 3 categorias principais',
            priority: 'high' as const,
            category: 'budgeting',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'free_2',
            title: 'Registre gastos por 1 semana',
            description: 'Anote tudo para identificar padr√µes',
            priority: 'high' as const,
            category: 'tracking',
            impact: 'M√©dio',
            actionable: true
          },
          {
            id: 'free_3',
            title: 'Revise assinaturas mensais',
            description: 'Cancele servi√ßos n√£o utilizados',
            priority: 'medium' as const,
            category: 'optimization',
            impact: 'M√©dio',
            actionable: true
          }
        ]
      },
      budget_optimization: {
        analysis: `üéØ **Guia de Or√ßamentos Eficazes**

**üìã M√©todo Envelope Digital:**
‚Ä¢ Crie "envelopes" para cada categoria de gasto
‚Ä¢ Defina limites mensais realistas
‚Ä¢ Pare de gastar quando o envelope esvaziar

**üîÑ Ciclo de Melhoria:**
1. **Planeje:** Defina or√ßamentos baseados no hist√≥rico
2. **Execute:** Registre gastos em tempo real
3. **Revise:** Analise desvios semanalmente
4. **Ajuste:** Corrija or√ßamentos no m√™s seguinte

**‚ö†Ô∏è Erros Comuns:**
‚Ä¢ Or√ßamentos muito restritivos (causam desist√™ncia)
‚Ä¢ N√£o incluir "gastos surpresa" (10% de buffer)
‚Ä¢ Ignorar pequenos gastos recorrentes
‚Ä¢ N√£o revisar mensalmente

**üöÄ Dica Avan√ßada:** Use a regra 80/20 - foque nos 20% de categorias que representam 80% dos gastos.

‚ú® **Upgrade para Pro:** Alertas autom√°ticos e an√°lise de compliance!`,
        recommendations: [
          {
            id: 'budget_1',
            title: 'Use o m√©todo envelope',
            description: 'Organize gastos em categorias com limites claros',
            priority: 'high' as const,
            category: 'method',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'budget_2',
            title: 'Adicione 10% de buffer',
            description: 'Reserve margem para gastos inesperados',
            priority: 'medium' as const,
            category: 'planning',
            impact: 'M√©dio',
            actionable: true
          }
        ]
      },
      investment_advice: {
        analysis: `üìà **Guia de Investimentos para Iniciantes**

**üè¶ Primeiros Passos:**
‚Ä¢ Quite d√≠vidas de cart√£o (juros de 300%+ ao ano)
‚Ä¢ Monte reserva de emerg√™ncia (6 meses de gastos)
‚Ä¢ Comece com Tesouro Direto (seguro e acess√≠vel)
‚Ä¢ Diversifique gradualmente

**üíº Carteira B√°sica Sugerida:**
‚Ä¢ 60% Renda Fixa (Tesouro, CDB, LCI/LCA)
‚Ä¢ 30% A√ß√µes/ETFs (BOVA11, IVVB11)
‚Ä¢ 10% FIIs (fundos imobili√°rios)

**‚ö†Ô∏è Evite no In√≠cio:**
‚Ä¢ Day trade e especula√ß√£o
‚Ä¢ Produtos complexos (COE, estruturados)
‚Ä¢ Concentra√ß√£o em uma √∫nica a√ß√£o
‚Ä¢ Investir dinheiro que precisa em 2 anos

üéØ **Meta:** Comece com R$ 100/m√™s e aumente 10% a cada 6 meses`,
        recommendations: [
          {
            id: 'inv_1',
            title: 'Monte sua reserva de emerg√™ncia',
            description: '6 meses de gastos em CDB ou Tesouro Selic',
            priority: 'high' as const,
            category: 'emergency',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'inv_2',
            title: 'Comece com Tesouro Direto',
            description: 'Investimento mais seguro para iniciantes',
            priority: 'high' as const,
            category: 'investing',
            impact: 'M√©dio',
            actionable: true
          }
        ]
      },
      fire_planning: {
        analysis: `üî• **Guia FIRE (Financial Independence, Retire Early)**

**üìä Regra dos 25x:**
‚Ä¢ Acumule 25x seus gastos anuais
‚Ä¢ Exemplo: R$ 5.000/m√™s = R$ 1.500.000 para FIRE
‚Ä¢ Use taxa de retirada de 4% ao ano

**üéØ Estrat√©gias FIRE:**
‚Ä¢ **Lean FIRE:** Vida minimalista, meta menor
‚Ä¢ **Fat FIRE:** Manter padr√£o de vida alto
‚Ä¢ **Coast FIRE:** Investir cedo, deixar render
‚Ä¢ **Barista FIRE:** Trabalho part-time + investimentos

**‚ö° Acelere seu FIRE:**
‚Ä¢ Aumente renda (side hustles, promo√ß√µes)
‚Ä¢ Reduza gastos desnecess√°rios
‚Ä¢ Invista em ativos que rendem acima da infla√ß√£o
‚Ä¢ Reinvista todos os dividendos

**üìà Exemplo Pr√°tico:**
R$ 2.000/m√™s por 20 anos a 10% a.a. = R$ 1.5M`,
        recommendations: [
          {
            id: 'fire_1',
            title: 'Calcule sua meta FIRE',
            description: 'Multiplique gastos anuais por 25',
            priority: 'high' as const,
            category: 'planning',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'fire_2',
            title: 'Aumente sua taxa de poupan√ßa',
            description: 'Meta: poupar 50%+ da renda para FIRE r√°pido',
            priority: 'high' as const,
            category: 'savings',
            impact: 'Alto',
            actionable: true
          }
        ]
      },
      crisis_simulation: {
        analysis: `‚ö†Ô∏è **Prepara√ß√£o para Crises Financeiras**

**üõ°Ô∏è Prote√ß√µes Essenciais:**
‚Ä¢ Reserva de emerg√™ncia robusta (12 meses)
‚Ä¢ Diversifica√ß√£o geogr√°fica de investimentos
‚Ä¢ Renda passiva atrav√©s de dividendos
‚Ä¢ Habilidades que geram renda extra

**üìâ Cen√°rios de Crise:**
‚Ä¢ **Recess√£o:** -30% em a√ß√µes, +20% desemprego
‚Ä¢ **Hiperinfla√ß√£o:** Ativos reais protegem valor
‚Ä¢ **Crise Setorial:** Diversifica√ß√£o salva carteira
‚Ä¢ **Emerg√™ncia Pessoal:** Reserva evita venda for√ßada

**üéØ Estrat√©gias Anti-Crise:**
‚Ä¢ Mantenha 20% em d√≥lar (hedge cambial)
‚Ä¢ Invista em REITs e FIIs (renda passiva)
‚Ä¢ Desenvolva m√∫ltiplas fontes de renda
‚Ä¢ Evite alavancagem excessiva

üí™ **Mentalidade:** Crises s√£o oportunidades para quem est√° preparado`,
        recommendations: [
          {
            id: 'crisis_1',
            title: 'Aumente reserva de emerg√™ncia',
            description: 'Meta: 12 meses de gastos para maior seguran√ßa',
            priority: 'high' as const,
            category: 'emergency',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'crisis_2',
            title: 'Diversifique geograficamente',
            description: 'Tenha 20% dos investimentos em d√≥lar',
            priority: 'medium' as const,
            category: 'diversification',
            impact: 'M√©dio',
            actionable: true
          }
        ]
      },
      general_query: {
        analysis: `üí° **Educa√ß√£o Financeira**

**üéØ Primeiros Passos:**
‚Ä¢ Organize suas finan√ßas: receitas, gastos, patrim√¥nio
‚Ä¢ Crie uma reserva de emerg√™ncia (6 meses de gastos)
‚Ä¢ Quite d√≠vidas de cart√£o de cr√©dito (juros altos)
‚Ä¢ Comece a investir mesmo com pouco dinheiro

**üìà Investimentos B√°sicos:**
‚Ä¢ Tesouro Direto: seguro e acess√≠vel
‚Ä¢ CDB com garantia do FGC
‚Ä¢ Fundos de √≠ndice (baixo custo)
‚Ä¢ Diversifique sempre

**üß† Mentalidade Financeira:**
‚Ä¢ Pague-se primeiro (poupe antes de gastar)
‚Ä¢ Viva abaixo das suas possibilidades
‚Ä¢ Invista em educa√ß√£o financeira
‚Ä¢ Tenha metas claras e mensur√°veis

‚ú® **Upgrade para Pro:** An√°lises personalizadas dos seus dados!`,
        recommendations: [
          {
            id: 'general_1',
            title: 'Crie reserva de emerg√™ncia',
            description: '6 meses de gastos em investimento l√≠quido',
            priority: 'high' as const,
            category: 'emergency',
            impact: 'Alto',
            actionable: true
          },
          {
            id: 'general_2',
            title: 'Comece a investir',
            description: 'Mesmo R$ 100/m√™s faz diferen√ßa no longo prazo',
            priority: 'high' as const,
            category: 'investing',
            impact: 'Alto',
            actionable: true
          }
        ]
      }
    }

    const content = educationalContent[type as keyof typeof educationalContent] || educationalContent.general_query
    
    return {
      analysis: content.analysis,
      recommendations: content.recommendations,
      insights: [
        {
          id: 'free_insight_1',
          type: 'trend' as const,
          title: 'Conte√∫do Educacional',
          description: 'Dicas gerais baseadas em boas pr√°ticas financeiras'
        }
      ],
      actions: [
        {
          id: 'upgrade_action',
          label: 'Upgrade para an√°lises personalizadas',
          type: 'create_budget',
          data: { upgrade: true }
        }
      ]
    }
  }
}

export const aiCopilot = new AIFinancialCopilot()